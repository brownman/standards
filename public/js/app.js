// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, App, Backbone, CheckView, Checks, Form, LoginView, Marionette, NavBarView, SettingsView, Task, TaskRowView, Tasks, TasksView, User, getWeekdaysAsArray, initialize, _;
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    Marionette = require('marionette');
    require('moment');
    require('plugins');
    User = require('user');
    Task = require('task');
    Form = require('form');
    Tasks = (function(_super) {

      __extends(Tasks, _super);

      function Tasks() {
        return Tasks.__super__.constructor.apply(this, arguments);
      }

      Tasks.prototype.model = Task;

      Tasks.prototype.url = '/api/tasks';

      return Tasks;

    })(Backbone.Collection);
    Checks = (function(_super) {

      __extends(Checks, _super);

      function Checks() {
        return Checks.__super__.constructor.apply(this, arguments);
      }

      Checks.prototype.model = Check;

      Checks.prototype.url = '/api/checks';

      return Checks;

    })(Backbone.Collection);
    Backbone.Marionette.Renderer.render = function(template, data) {
      return _.template(template, data);
    };
    getWeekdaysAsArray = function(full) {
      var day, firstDayOfWeek, lengthOfWeek, startingWeekday, today, week;
      today = moment().sod();
      startingWeekday = app.user.get('starting_weekday');
      firstDayOfWeek = moment().sod();
      firstDayOfWeek.day(startingWeekday);
      if (firstDayOfWeek.day() > today.day()) {
        firstDayOfWeek.day(startingWeekday - 7);
      }
      lengthOfWeek = full ? 6 : Math.min(6, today.diff(firstDayOfWeek, 'days'));
      return week = (function() {
        var _i, _results;
        _results = [];
        for (day = _i = 0; 0 <= lengthOfWeek ? _i <= lengthOfWeek : _i >= lengthOfWeek; day = 0 <= lengthOfWeek ? ++_i : --_i) {
          _results.push(firstDayOfWeek.clone().add('d', day));
        }
        return _results;
      })();
    };
    CheckView = (function(_super) {

      __extends(CheckView, _super);

      function CheckView() {
        return CheckView.__super__.constructor.apply(this, arguments);
      }

      CheckView.prototype.tagName = 'td';

      CheckView.prototype.template = require('jade!../templates/check')();

      CheckView.prototype.initialize = function() {
        if (this.model.isNew != null) {
          return this.date = this.model.get('date');
        } else {
          return _.extend(this, this.model);
        }
      };

      CheckView.prototype.events = {
        'click': 'toggleCheck'
      };

      CheckView.prototype.toggleCheck = function() {
        if (this.model.isNew != null) {
          return app.vent.trigger('task:uncheck', this.model);
        } else {
          return app.vent.trigger('task:check', this.date);
        }
      };

      CheckView.prototype.render = function() {
        this.$el.html(this.template);
        if (this.model.isNew != null) {
          this.$('img').addClass('complete');
        }
        return this;
      };

      return CheckView;

    })(Backbone.Marionette.ItemView);
    TaskRowView = (function(_super) {

      __extends(TaskRowView, _super);

      function TaskRowView() {
        return TaskRowView.__super__.constructor.apply(this, arguments);
      }

      TaskRowView.prototype.tagName = 'tr';

      TaskRowView.prototype.template = require('jade!../templates/task-row')();

      TaskRowView.prototype.itemView = CheckView;

      TaskRowView.prototype.initialEvents = function() {
        if (this.collection != null) {
          this.bindTo(this.collection, "add", this.render, this);
          this.bindTo(this.collection, "sync", this.render, this);
          this.bindTo(this.collection, "remove", this.render, this);
          return this.bindTo(this.collection, "reset", this.render, this);
        }
      };

      TaskRowView.prototype.initialize = function() {
        this.collection = this.model.get('checks');
        app.vent.on('task:check', this.check, this);
        return app.vent.on('task:uncheck', this.uncheck, this);
      };

      TaskRowView.prototype.showCollection = function() {
        var ItemView, boilerplate, check, day, index, weekdays, _i, _len, _results;
        ItemView = this.getItemView();
        weekdays = getWeekdaysAsArray();
        _results = [];
        for (index = _i = 0, _len = weekdays.length; _i < _len; index = ++_i) {
          day = weekdays[index];
          check = this.collection.find(function(check) {
            if ((check.get('date')) != null) {
              return (day.diff(moment(check.get('date')))) === 0;
            }
          });
          boilerplate = {
            date: day.format('YYYY-MM-DD')
          };
          _results.push(this.addItemView(check || (check = boilerplate), ItemView, index));
        }
        return _results;
      };

      TaskRowView.prototype.check = function(date) {
        return this.collection.create({
          date: date
        });
      };

      TaskRowView.prototype.uncheck = function(model) {
        return model.destroy();
      };

      return TaskRowView;

    })(Backbone.Marionette.CompositeView);
    TasksView = (function(_super) {

      __extends(TasksView, _super);

      function TasksView() {
        return TasksView.__super__.constructor.apply(this, arguments);
      }

      TasksView.prototype.tagName = 'table';

      TasksView.prototype.id = 'tasksView';

      TasksView.prototype.itemView = TaskRowView;

      TasksView.prototype.template = require('jade!../templates/tasks-table')();

      TasksView.prototype.templateHelpers = function() {
        return {
          getWeekdaysAsArray: getWeekdaysAsArray
        };
      };

      TasksView.prototype.render = function() {
        this.$el.html(_.template(this.template, this.serializeData()));
        return this.showCollection();
      };

      TasksView.prototype.appendHtml = function(collectionView, itemView) {
        return collectionView.$("tbody").append(itemView.el);
      };

      return TasksView;

    })(Backbone.Marionette.CollectionView);
    LoginView = (function(_super) {

      __extends(LoginView, _super);

      function LoginView() {
        return LoginView.__super__.constructor.apply(this, arguments);
      }

      LoginView.prototype.template = require('jade!../templates/login')();

      LoginView.prototype.schema = {
        email: {
          validate: ['required', 'email']
        },
        password: {
          type: 'Password'
        }
      };

      LoginView.prototype.fieldsets = [
        {
          fields: ['email', 'password'],
          legend: 'Log In'
        }
      ];

      LoginView.prototype.events = {
        'submit': 'clickedLogin',
        'click .forgot': 'clickedForgot'
      };

      LoginView.prototype.clickedLogin = function(e) {
        var email, password;
        e.preventDefault();
        e.stopPropagation();
        email = this.$('#email').val();
        password = this.$('#password').val();
        return app.vent.trigger('user:sign-in', email, password);
      };

      LoginView.prototype.clickedForgot = function(e) {
        var email;
        e.preventDefault();
        e.stopPropagation();
        email = this.$('#email').val();
        return app.vent.trigger('user:forgot', email);
      };

      return LoginView;

    })(Form);
    NavBarView = (function(_super) {

      __extends(NavBarView, _super);

      function NavBarView() {
        return NavBarView.__super__.constructor.apply(this, arguments);
      }

      NavBarView.prototype.template = require('jade!../templates/navbar')();

      NavBarView.prototype.initialize = function() {
        app.vent.on('scroll:window', this.addDropShadow, this);
        return this.model.on('change', this.render, this);
      };

      NavBarView.prototype.render = function() {
        this.$el.html(_.template(this.template, this.model.toJSON()));
        return this;
      };

      NavBarView.prototype.serializeData = function() {
        return {
          name: this.model.get('name')
        };
      };

      NavBarView.prototype.addDropShadow = function() {
        if (window.pageYOffset > 0) {
          return this.$el.children().addClass('nav-drop-shadow');
        } else {
          return this.$el.children().removeClass('nav-drop-shadow');
        }
      };

      return NavBarView;

    })(Backbone.Marionette.Layout);
    SettingsView = (function(_super) {

      __extends(SettingsView, _super);

      function SettingsView() {
        return SettingsView.__super__.constructor.apply(this, arguments);
      }

      SettingsView.prototype.template = require('jade!../templates/settings');

      return SettingsView;

    })(Backbone.Marionette.Layout);
    App = (function(_super) {

      __extends(App, _super);

      function App() {
        return App.__super__.constructor.apply(this, arguments);
      }

      App.prototype.initialize = function() {
        var _this = this;
        this.user = new User;
        this.tasks = new Tasks;
        this.showApp();
        $(window).bind('scroll touchmove', function() {
          return _this.vent.trigger('scroll:window');
        });
        app.vent.on('user:sign-in', this.signIn, this);
        app.vent.on('task:check', this.check, this);
        return app.vent.on('task:uncheck', this.uncheck, this);
      };

      App.prototype.checkAuth = function() {
        console.log('checking auth');
        return this.user.isSignedIn(this.showTasks, this.showLogin, this);
      };

      App.prototype.signIn = function(email, password) {
        return this.user.signIn(email, password, this.showTasks, this.showLogin, this);
      };

      App.prototype.showApp = function() {
        this.addRegions({
          navigation: ".navigation",
          body: ".body"
        });
        this.navigation.show(this.navigation = new NavBarView({
          model: this.user
        }));
        return this.checkAuth();
      };

      App.prototype.showTasks = function() {
        this.body.show(this.tasksView = new TasksView({
          collection: this.tasks
        }));
        return this.tasks.fetch();
      };

      App.prototype.showLogin = function() {
        return this.body.show(this.loginView = new LoginView);
      };

      App.prototype.showSettings = function() {
        console.log('settings');
        return this.body.show(this.settingsView = new SettingsView);
      };

      return App;

    })(Backbone.Marionette.Application);
    initialize = function() {
      window.app = new App;
      return window.app.initialize();
    };
    return {
      initialize: initialize
    };
  });

}).call(this);
