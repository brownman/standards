// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, Backbone, Check, Marionette, Task, User, _;
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    Marionette = require('marionette');
    User = (function(_super) {

      __extends(User, _super);

      function User() {
        return User.__super__.constructor.apply(this, arguments);
      }

      User.prototype.url = '/api/user/info';

      User.prototype.isSignedIn = function(yep, nope) {
        return this.fetch({
          success: function() {
            return yep();
          },
          error: function() {
            return nope();
          }
        });
      };

      User.prototype.signIn = function(email, password, onFail, onSucceed) {
        $.ajax({
          url: '/sign-in',
          method: 'POST',
          dataType: 'json',
          data: {
            email: email,
            password: password
          },
          error: onFail,
          success: onSucceed,
          context: this
        });
        return this;
      };

      User.prototype.signOut = function() {
        return $.ajax({
          url: '/sign-out',
          method: 'POST'
        }).done(function() {
          this.clear();
          return this.trigger('signed-out');
        });
      };

      return User;

    })(Backbone.Model);
    Task = (function(_super) {

      __extends(Task, _super);

      function Task() {
        return Task.__super__.constructor.apply(this, arguments);
      }

      Task.prototype.url = "/task";

      Task.prototype.getChecks = function() {
        var check, checks;
        return checks = (function() {
          var _i, _len, _ref, _results;
          _ref = app.checks;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            check = _ref[_i];
            if (check.get('task_id' === this.get('id'))) {
              _results.push(check);
            }
          }
          return _results;
        }).call(this);
      };

      return Task;

    })(Backbone.Model);
    Check = (function(_super) {

      __extends(Check, _super);

      function Check() {
        return Check.__super__.constructor.apply(this, arguments);
      }

      Check.prototype.url = "/check";

      return Check;

    })(Backbone.Model);
    return {
      User: User,
      Task: Task,
      Check: Check
    };
  });

}).call(this);
